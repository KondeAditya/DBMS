A. Consider Tables:
1. Borrower (Roll_no, Name, Date of Issue, Name of Book, Status)
2. Fine (Roll_no, Date, Amt)

Accept Roll_no and Name of Book from user.
Check the number of days (from date of issue).
If days are between 15 to 30 then fine amount will be Rs 5per day.
If no.of days>30, per day fine will be Rs 50 per day & for days less than 30, Rs 5 per day.
After submitting the book, status will change from I to R.
If condition of fine is true, then details will be stored into fine table.
Also handles the exception by named exception handler or user define exception handler.

CREATE TABLE Borrower (
    Roll_no        NUMBER PRIMARY KEY,
    Name           VARCHAR2(100),
    Date_of_Issue  DATE,
    Name_of_Book   VARCHAR2(100),
    Status         CHAR(1) 
);

CREATE TABLE Fine (
    Roll_no  NUMBER,
    Datee     DATE,
    Amt      NUMBER,
    CONSTRAINT fk_borrower FOREIGN KEY (Roll_no) REFERENCES Borrower(Roll_no)
);



//
INSERT INTO Borrower (Roll_no, Name, Date_of_Issue, Name_of_Book, Status) 
VALUES (101, 'ABC', '01-SEP-24', 'Database Systems', 'I');

INSERT INTO Borrower (Roll_no, Name, Date_of_Issue, Name_of_Book, Status) 
VALUES (102, 'xyz', '02-FEB-24', 'CNS', 'I');




DECLARE 
    v_roll_no       borrower.Roll_no%TYPE; 
    v_book_name     borrower.Name_of_Book%TYPE; 
    v_date_of_issue borrower.Date_of_Issue%TYPE; 
    v_status        borrower.Status%TYPE; 
    v_current_date  DATE; 
    v_days_diff     NUMBER; 
    v_fine_amt      NUMBER; 
     
    ex_book_not_found EXCEPTION; 
 
BEGIN 
    v_roll_no := 101; 
    v_book_name := 'Database Systems'; 
 
    SELECT Date_of_Issue, Status  
    INTO v_date_of_issue, v_status  
    FROM Borrower  
    WHERE Roll_no = v_roll_no AND Name_of_Book = v_book_name; 
 
    IF v_status = 'R' THEN 
        RAISE ex_book_not_found; 
    END IF; 
 
    v_current_date := SYSDATE; 
 
    v_days_diff := v_current_date - v_date_of_issue; 
 
    IF v_days_diff > 30 THEN 
        v_fine_amt := (v_days_diff - 30) * 50 + (30 * 5);  
    ELSIF v_days_diff > 15 THEN 
        v_fine_amt := (v_days_diff - 15) * 5; 
    ELSE 
        v_fine_amt := 0;  
    END IF; 
 
    IF v_fine_amt > 0 THEN 
        INSERT INTO Fine (Roll_no, Datee, Amt) 
        VALUES (v_roll_no, v_current_date, v_fine_amt); 
    END IF; 
 
    UPDATE Borrower  
    SET Status = 'R'  
    WHERE Roll_no = v_roll_no AND Name_of_Book = v_book_name; 
 
    COMMIT; 
 
    DBMS_OUTPUT.PUT_LINE('Book returned successfully. Fine Amount: ' || v_fine_amt); 
 
EXCEPTION 
    WHEN ex_book_not_found THEN 
        DBMS_OUTPUT.PUT_LINE('Error: Book not found or already returned.'); 
END; 

OUTPUT:
Statement processed.
Book returned successfully. Fine Amount: 31.40

SELECT * FROM Borrower;
ROLL_NO	 NAME	DATE_OF_ISSUE	NAME_OF_BOOK	  STATUS
102		 xyz	02-FEB-24		CNS				  R
101		 ABC	01-SEP-24		Database Systems  R

SELECT * FROM Fine;
ROLL_NO		DATEE				AMT
102			22-SEP-24		10314.01
101			22-SEP-24		31.40

B. Radius and Area pf circle insertion for numbers between 5 to 9.

CREATE TABLE areas (
    radius NUMBER,
    area   NUMBER(5,2)
);

DECLARE
    r  NUMBER;  
    area    NUMBER;  
BEGIN
    FOR r IN 5..9 LOOP
        area := 3.14 * r * r;

        INSERT INTO areas VALUES (r, area);

        DBMS_OUTPUT.PUT_LINE('Radius: ' || r || ' Area: ' || area);
    END LOOP;
END;
/
OUTPUT:
Statement processed.
Radius: 5 Area: 78.5
Radius: 6 Area: 113.04
Radius: 7 Area: 153.86
Radius: 8 Area: 200.96
Radius: 9 Area: 254.34

SELECT * FROM areas;
RADIUS	AREA
5		78.5
6		113.04
7		153.86
8		200.96
9		254.34
----------------------------------------
